<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.chauncy.data.mapper.message.information.comment.MmInformationCommentMapper">

    <!-- 通用查询映射结果 -->
    <resultMap id="BaseResultMap" type="com.chauncy.data.domain.po.message.information.comment.MmInformationCommentPo">
        <id column="id" property="id" />
        <result column="user_id" property="userId" />
        <result column="info_id" property="infoId" />
        <result column="parent_user_id" property="parentUserId" />
        <result column="parent_id" property="parentId" />
        <result column="enabled" property="enabled" />
        <result column="is_prosecuted" property="isProsecuted" />
        <result column="content" property="content" />
        <result column="create_time" property="createTime" />
        <result column="create_by" property="createBy" />
        <result column="update_time" property="updateTime" />
        <result column="update_by" property="updateBy" />
        <result column="del_flag" property="delFlag" />
    </resultMap>

    <!-- 通用查询结果列 -->
    <sql id="Base_Column_List">
        id, info_id, user_id, parent_user_id, parent_id, enabled, is_prosecuted, remark, create_time, create_by, update_time, update_by, del_flag
    </sql>


    <!--<resultMap id="commentBaseResult" type="com.chauncy.data.vo.manage.message.information.comment.InformationMainCommentVontVo">
        <id column="id" property="id"/>
        <result column="user_id" property="userId"/>
        <result column="parent_user_id" property="parentUserId"/>
        <result column="create_time" property="createTime"/>
        &lt;!&ndash; collection定义关联集合类型的属性封装规则
        offType:指定集合中的元素类型
        &ndash;&gt;
        <collection property="informationCommentVoList" ofType="com.chauncy.data.vo.manage.message.information.comment.InformationMainCommentVontVo">
            <id column="cId" property="id"/>
            <result column="cUserId" property="userId"/>
            <result column="cParentUserId" property="parentUserId"/>
            <result column="cCreateTime" property="createTime"/>
        </collection>
    </resultMap>
    <list id="searchPaging" resultMap="commentBaseResult">
        list mic.id, mic.user_id, mic.parent_user_id, mic.create_time, mic.enabled, IFNULL(uu.name,su.username) as userName,
        IFNULL(uu.name,su.avatar) as avatar, IFNULL(puu.name,psu.username) as parentUserName
        from mm_information_comment mic
        left join um_user uu on mic.user_id = uu.id
        left join sys_user su on mic.user_id = su.idsearchInfoViceComment
        left join um_user puu on mic.parent_user_id = uu.id
        left join sys_user psu on mic.parent_user_id = su.id
        where mic.info_id = 1
        <where>
                and  mic.info_id = #{id}
        </where>
        order by mic.create_time asc
    </list>-->


    <select id="searchInfoComment" resultType="com.chauncy.data.vo.manage.message.information.comment.InformationCommentVo">
        SELECT mi.id AS infoId,
            mic.id AS commentId,
            mic.`user_id`,
            uu.`phone`,
            mi.author,
            mi.`title`,
            mic.`content`,
            mic.`create_time`,
            mic.`enabled`
        FROM mm_information_comment mic
        INNER JOIN mm_information mi ON mic.info_id = mi.id AND mi.`del_flag` = 0
        INNER JOIN um_user uu ON uu.id = mic.`user_id`
        <where>
            mic.del_flag = 0
            <if test="startTime != null">
                and date(mic.create_time) <![CDATA[>= ]]>  #{startTime}
            </if>
            <if test="endTime != null">
                and date(mic.create_time) <![CDATA[<= ]]> #{endTime}
            </if>
            <if test="userId != null and userId != 0">
                and uu.id = #{userId}
            </if>
            <if test="enabled != null">
                and mic.enabled = #{enabled}
            </if>
        </where>
        ORDER BY mic.`create_time` DESC
    </select>

    <select id="searchInfoViceComment" resultType="com.chauncy.data.vo.manage.message.information.comment.InformationViceCommentVo">
        select mic.id as viceId,
            mic.user_id,
            mic.parent_user_id,
            mic.create_time,
            mic.enabled,
            mic.content,
            uu.name as userName,
            uu.photo as avatar,
            puu.name as parentUserName
        from mm_information_comment mic
        left join um_user uu on mic.user_id = uu.id
        left join um_user puu on mic.parent_user_id = puu.id
        where mic.info_id = #{id} and mic.del_flag = 0
        order by mic.create_time DESC
    </select>

    <resultMap id="commentBaseResult" type="com.chauncy.data.vo.manage.message.information.comment.InformationMainCommentVo">
        <id column="mainId" property="mainId"/>
        <result column="userName" property="userName"/>
        <result column="avatar" property="avatar"/>
        <result column="viceCommentCount" property="viceCommentCount"/>
        <result column="content" property="content"/>
        <result column="isLiked" property="isLiked"/>
        <result column="create_time" property="createTime"/>
        <!--collection定义关联集合类型的属性封装规则
        延迟加载 传递两个参数
　　　　{pMenuId=child_pid,userId=userId}
　　　　 传递查询参数名称=字段名称-->
        <collection property="informationViceCommentVoList" column="{id=mainId, userId=userId, type=type}"
                    select="com.chauncy.data.mapper.message.information.comment.MmInformationCommentMapper.searchViceCommentByMainId">
        </collection>
    </resultMap>
    <select id="searchInfoMainComment" resultMap="commentBaseResult">
        select
            count(mic1.id) AS viceCommentCount,
            mic.id AS mainId,
            mic.user_id,
            #{userId} AS userId,
            mic.parent_user_id,
            mic.create_time,
            mic.enabled,
            mic.liked_num,
            mic.content,
            (
                SELECT GROUP_CONCAT(`uul`.name)
                FROM um_user_label `uul` ,um_rel_user_label urul
                WHERE `urul`.user_label_id = `uul`.id
                AND `urul`.user_id = uu.`id`
                AND `urul`.del_flag = 0
                ) AS labels,
            (EXISTS
                (SELECT 1
                FROM mm_comment_liked mcl
                WHERE mcl.comment_id = mic.id
                AND mcl.user_id = #{userId}
                AND mcl.del_flag = 0
                )
            ) as isLiked,
            uu.name as userName,
            uu.photo as avatar ,
            'subStep' as type
        from mm_information_comment mic
        inner join um_user uu on mic.user_id = uu.id
        left join mm_information_comment mic1 on (mic1.parent_id = mic.id and mic1.enabled = 1 and mic1.del_flag = 0)
        <where>
                <if test="null != id">
                    and  mic.info_id = #{id}
                </if>
                <if test="null != commentId">
                    and  mic.id = #{commentId}
                </if>
                and mic.parent_id is null  and mic.enabled = 1 and mic.del_flag = 0
        </where>
        GROUP BY mic.id
        order by mic.create_time desc
    </select>


    <!-- 副评论默认展示前两条  点击查看剩下所有副评论 -->
    <select id="searchViceCommentByMainId" resultType="com.chauncy.data.vo.manage.message.information.comment.InformationViceCommentVo">
        select
            mic.id AS viceId,
            mic.user_id,
            mic.parent_user_id,
            mic.create_time,
            mic.enabled,
            mic.content,
            mic.liked_num,
            (EXISTS
                (SELECT 1
                FROM mm_comment_liked mcl
                WHERE mcl.comment_id = mic.id
                AND mcl.user_id = #{userId}
                AND mcl.del_flag = 0
                )
            ) as isLiked,
            uu.name as userName,
            uu.photo as avatar,
            puu.name as parentUserName
        from mm_information_comment mic
        left join um_user uu on mic.user_id = uu.id
        left join um_user puu on mic.parent_user_id = puu.id
        where mic.parent_id = #{id} and mic.del_flag = 0 and mic.enabled = 1
        order by mic.create_time desc
        <choose>
            <when test="type != null and type =='subStep'">
                limit 0, 2
            </when>
            <otherwise>
                limit 2, 500
            </otherwise>
        </choose>
    </select>


</mapper>
